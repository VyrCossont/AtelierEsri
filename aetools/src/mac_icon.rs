//! Support for Macintosh icon formats.
//!
//! See:
//! - https://en.wikipedia.org/wiki/Apple_Icon_Image_format
//! - `RIncludes/Icons.r` in Apple MPW headers

use crate::mac::resource::icon::IconIO;
use crate::mac::resource::Resource;
use crate::mac::OSType;
use anyhow::bail;
use binrw::{binrw, parser, BinRead, BinResult};
use std::io::Cursor;
use std::path::Path;

#[binrw]
#[brw(big, magic = b"icns")]
struct AppleIconFile {
    #[bw(calc = 8 + entries.iter().map(|x|x.total_bytes()).sum::<u32>())]
    total_bytes: u32,
    #[br(parse_with = entries_parser, args(total_bytes - 8))]
    entries: Vec<AppleIconEntry>,
}

#[parser(reader: r)]
fn entries_parser(mut bytes_remaining: u32) -> BinResult<Vec<AppleIconEntry>> {
    let mut entries = vec![];
    while bytes_remaining > 0 {
        let entry = AppleIconEntry::read(r)?;
        bytes_remaining -= entry.total_bytes();
        entries.push(entry);
    }
    Ok(entries)
}

#[binrw]
#[brw(big)]
enum AppleIconEntry {
    /// Currently:
    /// - any post-System-7 icon type
    /// - metadata
    /// - nested `.icns` files
    Unknown {
        os_type: OSType,
        #[bw(calc = data.len() as u32 + 8)]
        total_bytes: u32,
        #[br(count = total_bytes - 8)]
        data: Vec<u8>,
    },
}

// TODO: replace this mess with the generic resource reader

impl AppleIconEntry {
    fn total_bytes(&self) -> u32 {
        0
    }
}

const TEST_ICON: [u8; 128] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x3C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0xE0, 0x00, 0x00,
    0x11, 0x81, 0xE7, 0xC0, 0x11, 0x01, 0x16, 0x20, 0x11, 0x01, 0x16, 0x20, 0x11, 0x03, 0x16, 0x20,
    0x11, 0x03, 0x14, 0x20, 0x7F, 0xF9, 0x14, 0x20, 0x00, 0x40, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

const TEST_ICS8: [u8; 256] = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x69, 0x69, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x69, 0x69, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

// pub fn demo(output_path: &Path) -> anyhow::Result<()> {
//     let mut reader = Cursor::new(TEST_ICON);
//     let resource = Resource::read_args(&mut reader, (*b"ICON", TEST_ICON.len()))?;
//     let Resource::ICON(icon) = resource else {
//         bail!("Failed to read expected resource type (ICON)");
//     };
//     let Some(image) = icon.image() else {
//         bail!("Failed to decode ICON into image");
//     };
//     image.save(output_path)?;
//     Ok(())
// }

pub fn demo(output_path: &Path) -> anyhow::Result<()> {
    let mut reader = Cursor::new(TEST_ICS8);
    let resource = Resource::read_args(&mut reader, (*b"ics8", TEST_ICS8.len()))?;
    let Resource::ICS8(icon) = resource else {
        bail!("Failed to read expected resource type (ics8)");
    };
    let Some(image) = icon.image() else {
        bail!("Failed to decode ics8 into image");
    };
    image.save(output_path)?;
    Ok(())
}
